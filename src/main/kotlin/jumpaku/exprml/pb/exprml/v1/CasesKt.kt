// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: exprml/v1/expr.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package jumpaku.exprml.pb.exprml.v1;

@kotlin.jvm.JvmName("-initializecases")
public inline fun cases(block: jumpaku.exprml.pb.exprml.v1.CasesKt.Dsl.() -> kotlin.Unit): jumpaku.exprml.pb.exprml.v1.Cases =
  jumpaku.exprml.pb.exprml.v1.CasesKt.Dsl._create(jumpaku.exprml.pb.exprml.v1.Cases.newBuilder()).apply { block() }._build()
/**
 * ```
 * Cases is a Cases expression.
 * ```
 *
 * Protobuf type `exprml.v1.Cases`
 */
public object CasesKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: jumpaku.exprml.pb.exprml.v1.Cases.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: jumpaku.exprml.pb.exprml.v1.Cases.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): jumpaku.exprml.pb.exprml.v1.Cases = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class CasesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * Cases is a list of cases.
     * ```
     *
     * `repeated .exprml.v1.Cases.Case cases = 1 [json_name = "cases"];`
     */
     public val cases: com.google.protobuf.kotlin.DslList<jumpaku.exprml.pb.exprml.v1.Cases.Case, CasesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.casesList
      )
    /**
     * ```
     * Cases is a list of cases.
     * ```
     *
     * `repeated .exprml.v1.Cases.Case cases = 1 [json_name = "cases"];`
     * @param value The cases to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addCases")
    public fun com.google.protobuf.kotlin.DslList<jumpaku.exprml.pb.exprml.v1.Cases.Case, CasesProxy>.add(value: jumpaku.exprml.pb.exprml.v1.Cases.Case) {
      _builder.addCases(value)
    }
    /**
     * ```
     * Cases is a list of cases.
     * ```
     *
     * `repeated .exprml.v1.Cases.Case cases = 1 [json_name = "cases"];`
     * @param value The cases to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignCases")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<jumpaku.exprml.pb.exprml.v1.Cases.Case, CasesProxy>.plusAssign(value: jumpaku.exprml.pb.exprml.v1.Cases.Case) {
      add(value)
    }
    /**
     * ```
     * Cases is a list of cases.
     * ```
     *
     * `repeated .exprml.v1.Cases.Case cases = 1 [json_name = "cases"];`
     * @param values The cases to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllCases")
    public fun com.google.protobuf.kotlin.DslList<jumpaku.exprml.pb.exprml.v1.Cases.Case, CasesProxy>.addAll(values: kotlin.collections.Iterable<jumpaku.exprml.pb.exprml.v1.Cases.Case>) {
      _builder.addAllCases(values)
    }
    /**
     * ```
     * Cases is a list of cases.
     * ```
     *
     * `repeated .exprml.v1.Cases.Case cases = 1 [json_name = "cases"];`
     * @param values The cases to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllCases")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<jumpaku.exprml.pb.exprml.v1.Cases.Case, CasesProxy>.plusAssign(values: kotlin.collections.Iterable<jumpaku.exprml.pb.exprml.v1.Cases.Case>) {
      addAll(values)
    }
    /**
     * ```
     * Cases is a list of cases.
     * ```
     *
     * `repeated .exprml.v1.Cases.Case cases = 1 [json_name = "cases"];`
     * @param index The index to set the value at.
     * @param value The cases to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setCases")
    public operator fun com.google.protobuf.kotlin.DslList<jumpaku.exprml.pb.exprml.v1.Cases.Case, CasesProxy>.set(index: kotlin.Int, value: jumpaku.exprml.pb.exprml.v1.Cases.Case) {
      _builder.setCases(index, value)
    }
    /**
     * ```
     * Cases is a list of cases.
     * ```
     *
     * `repeated .exprml.v1.Cases.Case cases = 1 [json_name = "cases"];`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearCases")
    public fun com.google.protobuf.kotlin.DslList<jumpaku.exprml.pb.exprml.v1.Cases.Case, CasesProxy>.clear() {
      _builder.clearCases()
    }

  }
  @kotlin.jvm.JvmName("-initializecase")
  public inline fun case(block: jumpaku.exprml.pb.exprml.v1.CasesKt.CaseKt.Dsl.() -> kotlin.Unit): jumpaku.exprml.pb.exprml.v1.Cases.Case =
    jumpaku.exprml.pb.exprml.v1.CasesKt.CaseKt.Dsl._create(jumpaku.exprml.pb.exprml.v1.Cases.Case.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Case is a conditional branch.
   * ```
   *
   * Protobuf type `exprml.v1.Cases.Case`
   */
  public object CaseKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: jumpaku.exprml.pb.exprml.v1.Cases.Case.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: jumpaku.exprml.pb.exprml.v1.Cases.Case.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): jumpaku.exprml.pb.exprml.v1.Cases.Case = _builder.build()

      /**
       * ```
       * Whether the case is otherwise.
       * ```
       *
       * `bool is_otherwise = 1 [json_name = "isOtherwise"];`
       */
      public var isOtherwise: kotlin.Boolean
        @JvmName("getIsOtherwise")
        get() = _builder.isOtherwise
        @JvmName("setIsOtherwise")
        set(value) {
          _builder.isOtherwise = value
        }
      /**
       * ```
       * Whether the case is otherwise.
       * ```
       *
       * `bool is_otherwise = 1 [json_name = "isOtherwise"];`
       */
      public fun clearIsOtherwise() {
        _builder.clearIsOtherwise()
      }

      /**
       * ```
       * When is the condition of the case.
       * ```
       *
       * `.exprml.v1.Expr when = 2 [json_name = "when"];`
       */
      public var when_: jumpaku.exprml.pb.exprml.v1.Expr
        @JvmName("getWhen_")
        get() = _builder.`when`
        @JvmName("setWhen_")
        set(value) {
          _builder.`when` = value
        }
      /**
       * ```
       * When is the condition of the case.
       * ```
       *
       * `.exprml.v1.Expr when = 2 [json_name = "when"];`
       */
      public fun clearWhen_() {
        _builder.clearWhen()
      }
      /**
       * ```
       * When is the condition of the case.
       * ```
       *
       * `.exprml.v1.Expr when = 2 [json_name = "when"];`
       * @return Whether the when field is set.
       */
      public fun hasWhen_(): kotlin.Boolean {
        return _builder.hasWhen()
      }
      public val CaseKt.Dsl.whenOrNull: jumpaku.exprml.pb.exprml.v1.Expr?
        get() = _builder.whenOrNull

      /**
       * ```
       * Then is the body of the case.
       * ```
       *
       * `.exprml.v1.Expr then = 3 [json_name = "then"];`
       */
      public var then: jumpaku.exprml.pb.exprml.v1.Expr
        @JvmName("getThen")
        get() = _builder.then
        @JvmName("setThen")
        set(value) {
          _builder.then = value
        }
      /**
       * ```
       * Then is the body of the case.
       * ```
       *
       * `.exprml.v1.Expr then = 3 [json_name = "then"];`
       */
      public fun clearThen() {
        _builder.clearThen()
      }
      /**
       * ```
       * Then is the body of the case.
       * ```
       *
       * `.exprml.v1.Expr then = 3 [json_name = "then"];`
       * @return Whether the then field is set.
       */
      public fun hasThen(): kotlin.Boolean {
        return _builder.hasThen()
      }
      public val CaseKt.Dsl.thenOrNull: jumpaku.exprml.pb.exprml.v1.Expr?
        get() = _builder.thenOrNull

      /**
       * ```
       * Otherwise is the body of the case.
       * ```
       *
       * `.exprml.v1.Expr otherwise = 4 [json_name = "otherwise"];`
       */
      public var otherwise: jumpaku.exprml.pb.exprml.v1.Expr
        @JvmName("getOtherwise")
        get() = _builder.otherwise
        @JvmName("setOtherwise")
        set(value) {
          _builder.otherwise = value
        }
      /**
       * ```
       * Otherwise is the body of the case.
       * ```
       *
       * `.exprml.v1.Expr otherwise = 4 [json_name = "otherwise"];`
       */
      public fun clearOtherwise() {
        _builder.clearOtherwise()
      }
      /**
       * ```
       * Otherwise is the body of the case.
       * ```
       *
       * `.exprml.v1.Expr otherwise = 4 [json_name = "otherwise"];`
       * @return Whether the otherwise field is set.
       */
      public fun hasOtherwise(): kotlin.Boolean {
        return _builder.hasOtherwise()
      }
      public val CaseKt.Dsl.otherwiseOrNull: jumpaku.exprml.pb.exprml.v1.Expr?
        get() = _builder.otherwiseOrNull
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun jumpaku.exprml.pb.exprml.v1.Cases.copy(block: `jumpaku.exprml.pb.exprml.v1`.CasesKt.Dsl.() -> kotlin.Unit): jumpaku.exprml.pb.exprml.v1.Cases =
  `jumpaku.exprml.pb.exprml.v1`.CasesKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun jumpaku.exprml.pb.exprml.v1.Cases.Case.copy(block: `jumpaku.exprml.pb.exprml.v1`.CasesKt.CaseKt.Dsl.() -> kotlin.Unit): jumpaku.exprml.pb.exprml.v1.Cases.Case =
  `jumpaku.exprml.pb.exprml.v1`.CasesKt.CaseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val jumpaku.exprml.pb.exprml.v1.Cases.CaseOrBuilder.whenOrNull: jumpaku.exprml.pb.exprml.v1.Expr?
  get() = if (hasWhen()) getWhen() else null

public val jumpaku.exprml.pb.exprml.v1.Cases.CaseOrBuilder.thenOrNull: jumpaku.exprml.pb.exprml.v1.Expr?
  get() = if (hasThen()) getThen() else null

public val jumpaku.exprml.pb.exprml.v1.Cases.CaseOrBuilder.otherwiseOrNull: jumpaku.exprml.pb.exprml.v1.Expr?
  get() = if (hasOtherwise()) getOtherwise() else null

