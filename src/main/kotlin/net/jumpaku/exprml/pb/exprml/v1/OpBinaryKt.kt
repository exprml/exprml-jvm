// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: exprml/v1/expr.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package net.jumpaku.exprml.pb.exprml.v1;

@kotlin.jvm.JvmName("-initializeopBinary")
public inline fun opBinary(block: net.jumpaku.exprml.pb.exprml.v1.OpBinaryKt.Dsl.() -> kotlin.Unit): net.jumpaku.exprml.pb.exprml.v1.OpBinary =
  net.jumpaku.exprml.pb.exprml.v1.OpBinaryKt.Dsl._create(net.jumpaku.exprml.pb.exprml.v1.OpBinary.newBuilder()).apply { block() }._build()
/**
 * ```
 * OpBinary is an OpBinary expression.
 * ```
 *
 * Protobuf type `exprml.v1.OpBinary`
 */
public object OpBinaryKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: net.jumpaku.exprml.pb.exprml.v1.OpBinary.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: net.jumpaku.exprml.pb.exprml.v1.OpBinary.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): net.jumpaku.exprml.pb.exprml.v1.OpBinary = _builder.build()

    /**
     * ```
     * Op is the operator.
     * ```
     *
     * `.exprml.v1.OpBinary.Op op = 1 [json_name = "op"];`
     */
    public var op: net.jumpaku.exprml.pb.exprml.v1.OpBinary.Op
      @JvmName("getOp")
      get() = _builder.op
      @JvmName("setOp")
      set(value) {
        _builder.op = value
      }
    public var opValue: kotlin.Int
      @JvmName("getOpValue")
      get() = _builder.opValue
      @JvmName("setOpValue")
      set(value) {
        _builder.opValue = value
      }
    /**
     * ```
     * Op is the operator.
     * ```
     *
     * `.exprml.v1.OpBinary.Op op = 1 [json_name = "op"];`
     */
    public fun clearOp() {
      _builder.clearOp()
    }

    /**
     * ```
     * Left is the left operand.
     * ```
     *
     * `.exprml.v1.Expr left = 2 [json_name = "left"];`
     */
    public var left: net.jumpaku.exprml.pb.exprml.v1.Expr
      @JvmName("getLeft")
      get() = _builder.left
      @JvmName("setLeft")
      set(value) {
        _builder.left = value
      }
    /**
     * ```
     * Left is the left operand.
     * ```
     *
     * `.exprml.v1.Expr left = 2 [json_name = "left"];`
     */
    public fun clearLeft() {
      _builder.clearLeft()
    }
    /**
     * ```
     * Left is the left operand.
     * ```
     *
     * `.exprml.v1.Expr left = 2 [json_name = "left"];`
     * @return Whether the left field is set.
     */
    public fun hasLeft(): kotlin.Boolean {
      return _builder.hasLeft()
    }
    public val OpBinaryKt.Dsl.leftOrNull: net.jumpaku.exprml.pb.exprml.v1.Expr?
      get() = _builder.leftOrNull

    /**
     * ```
     * Right is the right operand.
     * ```
     *
     * `.exprml.v1.Expr right = 3 [json_name = "right"];`
     */
    public var right: net.jumpaku.exprml.pb.exprml.v1.Expr
      @JvmName("getRight")
      get() = _builder.right
      @JvmName("setRight")
      set(value) {
        _builder.right = value
      }
    /**
     * ```
     * Right is the right operand.
     * ```
     *
     * `.exprml.v1.Expr right = 3 [json_name = "right"];`
     */
    public fun clearRight() {
      _builder.clearRight()
    }
    /**
     * ```
     * Right is the right operand.
     * ```
     *
     * `.exprml.v1.Expr right = 3 [json_name = "right"];`
     * @return Whether the right field is set.
     */
    public fun hasRight(): kotlin.Boolean {
      return _builder.hasRight()
    }
    public val OpBinaryKt.Dsl.rightOrNull: net.jumpaku.exprml.pb.exprml.v1.Expr?
      get() = _builder.rightOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun net.jumpaku.exprml.pb.exprml.v1.OpBinary.copy(block: `net.jumpaku.exprml.pb.exprml.v1`.OpBinaryKt.Dsl.() -> kotlin.Unit): net.jumpaku.exprml.pb.exprml.v1.OpBinary =
  `net.jumpaku.exprml.pb.exprml.v1`.OpBinaryKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val net.jumpaku.exprml.pb.exprml.v1.OpBinaryOrBuilder.leftOrNull: net.jumpaku.exprml.pb.exprml.v1.Expr?
  get() = if (hasLeft()) getLeft() else null

public val net.jumpaku.exprml.pb.exprml.v1.OpBinaryOrBuilder.rightOrNull: net.jumpaku.exprml.pb.exprml.v1.Expr?
  get() = if (hasRight()) getRight() else null

