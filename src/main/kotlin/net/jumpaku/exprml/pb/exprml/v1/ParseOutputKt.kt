// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: exprml/v1/parser.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package net.jumpaku.exprml.pb.exprml.v1;

@kotlin.jvm.JvmName("-initializeparseOutput")
public inline fun parseOutput(block: net.jumpaku.exprml.pb.exprml.v1.ParseOutputKt.Dsl.() -> kotlin.Unit): net.jumpaku.exprml.pb.exprml.v1.ParseOutput =
  net.jumpaku.exprml.pb.exprml.v1.ParseOutputKt.Dsl._create(net.jumpaku.exprml.pb.exprml.v1.ParseOutput.newBuilder()).apply { block() }._build()
/**
 * ```
 * ParseOutput is the output message for the Parse method.
 * ```
 *
 * Protobuf type `exprml.v1.ParseOutput`
 */
public object ParseOutputKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: net.jumpaku.exprml.pb.exprml.v1.ParseOutput.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: net.jumpaku.exprml.pb.exprml.v1.ParseOutput.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): net.jumpaku.exprml.pb.exprml.v1.ParseOutput = _builder.build()

    /**
     * ```
     * Whether an error occurred during parsing.
     * ```
     *
     * `bool is_error = 1 [json_name = "isError"];`
     */
    public var isError: kotlin.Boolean
      @JvmName("getIsError")
      get() = _builder.isError
      @JvmName("setIsError")
      set(value) {
        _builder.isError = value
      }
    /**
     * ```
     * Whether an error occurred during parsing.
     * ```
     *
     * `bool is_error = 1 [json_name = "isError"];`
     */
    public fun clearIsError() {
      _builder.clearIsError()
    }

    /**
     * ```
     * Error message if is_error is true.
     * ```
     *
     * `string error_message = 2 [json_name = "errorMessage"];`
     */
    public var errorMessage: kotlin.String
      @JvmName("getErrorMessage")
      get() = _builder.errorMessage
      @JvmName("setErrorMessage")
      set(value) {
        _builder.errorMessage = value
      }
    /**
     * ```
     * Error message if is_error is true.
     * ```
     *
     * `string error_message = 2 [json_name = "errorMessage"];`
     */
    public fun clearErrorMessage() {
      _builder.clearErrorMessage()
    }

    /**
     * ```
     * Parsed Expr.
     * ```
     *
     * `.exprml.v1.Expr expr = 3 [json_name = "expr"];`
     */
    public var expr: net.jumpaku.exprml.pb.exprml.v1.Expr
      @JvmName("getExpr")
      get() = _builder.expr
      @JvmName("setExpr")
      set(value) {
        _builder.expr = value
      }
    /**
     * ```
     * Parsed Expr.
     * ```
     *
     * `.exprml.v1.Expr expr = 3 [json_name = "expr"];`
     */
    public fun clearExpr() {
      _builder.clearExpr()
    }
    /**
     * ```
     * Parsed Expr.
     * ```
     *
     * `.exprml.v1.Expr expr = 3 [json_name = "expr"];`
     * @return Whether the expr field is set.
     */
    public fun hasExpr(): kotlin.Boolean {
      return _builder.hasExpr()
    }
    public val ParseOutputKt.Dsl.exprOrNull: net.jumpaku.exprml.pb.exprml.v1.Expr?
      get() = _builder.exprOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun net.jumpaku.exprml.pb.exprml.v1.ParseOutput.copy(block: `net.jumpaku.exprml.pb.exprml.v1`.ParseOutputKt.Dsl.() -> kotlin.Unit): net.jumpaku.exprml.pb.exprml.v1.ParseOutput =
  `net.jumpaku.exprml.pb.exprml.v1`.ParseOutputKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val net.jumpaku.exprml.pb.exprml.v1.ParseOutputOrBuilder.exprOrNull: net.jumpaku.exprml.pb.exprml.v1.Expr?
  get() = if (hasExpr()) getExpr() else null

