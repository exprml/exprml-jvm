// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: exprml/v1/value.proto
// Protobuf Java Version: 4.28.2

package net.jumpaku.exprml.pb.exprml.v1;

public interface ValueOrBuilder extends
    // @@protoc_insertion_point(interface_extends:exprml.v1.Value)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Type of the value.
   * </pre>
   *
   * <code>.exprml.v1.Value.Type type = 1 [json_name = "type"];</code>
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   * <pre>
   * Type of the value.
   * </pre>
   *
   * <code>.exprml.v1.Value.Type type = 1 [json_name = "type"];</code>
   * @return The type.
   */
  net.jumpaku.exprml.pb.exprml.v1.Value.Type getType();

  /**
   * <pre>
   * bool has a boolean value if the type is TYPE_BOOL.
   * </pre>
   *
   * <code>bool bool = 2 [json_name = "bool"];</code>
   * @return The bool.
   */
  boolean getBool();

  /**
   * <pre>
   * num has a number value if the type is TYPE_NUM.
   * </pre>
   *
   * <code>double num = 3 [json_name = "num"];</code>
   * @return The num.
   */
  double getNum();

  /**
   * <pre>
   * str has a string value if the type is TYPE_STR.
   * </pre>
   *
   * <code>string str = 4 [json_name = "str"];</code>
   * @return The str.
   */
  java.lang.String getStr();
  /**
   * <pre>
   * str has a string value if the type is TYPE_STR.
   * </pre>
   *
   * <code>string str = 4 [json_name = "str"];</code>
   * @return The bytes for str.
   */
  com.google.protobuf.ByteString
      getStrBytes();

  /**
   * <pre>
   * arr has an array value if the type is TYPE_ARR.
   * </pre>
   *
   * <code>repeated .exprml.v1.Value arr = 5 [json_name = "arr"];</code>
   */
  java.util.List<net.jumpaku.exprml.pb.exprml.v1.Value> 
      getArrList();
  /**
   * <pre>
   * arr has an array value if the type is TYPE_ARR.
   * </pre>
   *
   * <code>repeated .exprml.v1.Value arr = 5 [json_name = "arr"];</code>
   */
  net.jumpaku.exprml.pb.exprml.v1.Value getArr(int index);
  /**
   * <pre>
   * arr has an array value if the type is TYPE_ARR.
   * </pre>
   *
   * <code>repeated .exprml.v1.Value arr = 5 [json_name = "arr"];</code>
   */
  int getArrCount();
  /**
   * <pre>
   * arr has an array value if the type is TYPE_ARR.
   * </pre>
   *
   * <code>repeated .exprml.v1.Value arr = 5 [json_name = "arr"];</code>
   */
  java.util.List<? extends net.jumpaku.exprml.pb.exprml.v1.ValueOrBuilder> 
      getArrOrBuilderList();
  /**
   * <pre>
   * arr has an array value if the type is TYPE_ARR.
   * </pre>
   *
   * <code>repeated .exprml.v1.Value arr = 5 [json_name = "arr"];</code>
   */
  net.jumpaku.exprml.pb.exprml.v1.ValueOrBuilder getArrOrBuilder(
      int index);

  /**
   * <pre>
   * obj has an object value if the type is TYPE_OBJ.
   * </pre>
   *
   * <code>map&lt;string, .exprml.v1.Value&gt; obj = 6 [json_name = "obj"];</code>
   */
  int getObjCount();
  /**
   * <pre>
   * obj has an object value if the type is TYPE_OBJ.
   * </pre>
   *
   * <code>map&lt;string, .exprml.v1.Value&gt; obj = 6 [json_name = "obj"];</code>
   */
  boolean containsObj(
      java.lang.String key);
  /**
   * Use {@link #getObjMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, net.jumpaku.exprml.pb.exprml.v1.Value>
  getObj();
  /**
   * <pre>
   * obj has an object value if the type is TYPE_OBJ.
   * </pre>
   *
   * <code>map&lt;string, .exprml.v1.Value&gt; obj = 6 [json_name = "obj"];</code>
   */
  java.util.Map<java.lang.String, net.jumpaku.exprml.pb.exprml.v1.Value>
  getObjMap();
  /**
   * <pre>
   * obj has an object value if the type is TYPE_OBJ.
   * </pre>
   *
   * <code>map&lt;string, .exprml.v1.Value&gt; obj = 6 [json_name = "obj"];</code>
   */
  /* nullable */
net.jumpaku.exprml.pb.exprml.v1.Value getObjOrDefault(
      java.lang.String key,
      /* nullable */
net.jumpaku.exprml.pb.exprml.v1.Value defaultValue);
  /**
   * <pre>
   * obj has an object value if the type is TYPE_OBJ.
   * </pre>
   *
   * <code>map&lt;string, .exprml.v1.Value&gt; obj = 6 [json_name = "obj"];</code>
   */
  net.jumpaku.exprml.pb.exprml.v1.Value getObjOrThrow(
      java.lang.String key);
}
